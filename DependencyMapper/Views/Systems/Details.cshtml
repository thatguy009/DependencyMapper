@model DependencyMapper.Models.System

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>System</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Tags)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Tags)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Dependants)
        </dt>

        <dd>
            @if (Model.Dependants != null)
            {
                <ul>
                    @foreach (var item in Model.Dependants)
                    {
                        <li>
                            @Html.ActionLink(item.Name, "Details", new { id = item.ID })
                        </li>
                    }
                </ul>
            }

        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Dependancies)
        </dt>

        <dd>

            @if (Model.Dependancies != null)
            {
                <ul>
                    @foreach (var item in Model.Dependancies)
                    {
                        <li>
                            @Html.ActionLink(item.Name, "Details", new { id = item.ID })
                        </li>
                    }
                </ul>
            }
        </dd>

    </dl>
</div>
<div id="graph"></div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
<style>
    .link {
        fill: none;
        stroke: #666;
        stroke-width: 1.5px;
    }

    #licensing {
        fill: green;
    }

    .link.Dependancy {
        stroke: green;
    }

    .link.Dependant {
        stroke-dasharray: 0,2 1;
    }

    circle {
        fill: #ccc;
        stroke: #333;
        stroke-width: 1.5px;
    }

    text {
        font: 10px sans-serif;
        pointer-events: none;
        text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
    }
</style>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>
    $(function () {
        $.getJSON("@Url.Action("Links", "api", new { id= Model.ID})", function (links) {
            if (links.length > 0) {
                var existsAlready = [];

                var nodes = {};
                if (links != null) {
                    // Compute the distinct nodes from the links.
                    links.forEach(function (link) {
                        link.source = nodes[link.source] || (nodes[link.source] = { name: link.source });
                        link.target = nodes[link.target] || (nodes[link.target] = { name: link.target });
                    });
                }

                var width = 960,
                    height = 500;

                var force = d3.layout.force()
                    .nodes(d3.values(nodes))
                    .links(links)
                    .size([width, height])
                    .linkDistance(80)
                    .charge(-300)
                    .on("tick", tick)
                    .start();

                var svg = d3.select("#graph").append("svg")
                    .attr("width", width)
                    .attr("height", height);

                // Per-type markers, as they don't inherit styles.
                svg.append("defs").selectAll("marker")
                    .data(["Dependant", "Dependancy"])
                    .enter().append("marker")
                    .attr("id", function (d) { return d; })
                    .attr("viewBox", "0 -5 10 10")
                    .attr("refX", 15)
                    .attr("refY", -1.5)
                    .attr("markerWidth", 6)
                    .attr("markerHeight", 6)
                    .attr("orient", "auto")
                    .append("path")
                    .attr("d", "M0,-5L10,0L0,5");

                var path = svg.append("g").selectAll("path")
                    .data(force.links())
                    .enter().append("path")
                    .attr("class", function (d) { return "link " + d.type; })
                    .attr("marker-end", function (d) { return "url(#" + d.type + ")"; });

                var circle = svg.append("g").selectAll("circle")
                    .data(force.nodes())
                    .enter().append("circle")
                    .attr("r", 6)
                    .call(force.drag);

                var text = svg.append("g").selectAll("text")
                    .data(force.nodes())
                    .enter().append("text")
                    .attr("x", 10)
                    .attr("y", "1em")
                    .text(function (d) { return d.name; });

                // Use elliptical arc path segments to doubly-encode directionality.
                function tick() {
                    path.attr("d", linkArc);
                    circle.attr("transform", transform);
                    text.attr("transform", transform);
                }

                function linkArc(d) {
                    var dx = d.target.x - d.source.x,
                        dy = d.target.y - d.source.y,
                        dr = Math.sqrt(dx * dx + dy * dy);
                    return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
                }

                function transform(d) {
                    return "translate(" + d.x + "," + d.y + ")";
                }
            }

        });

    })

</script>